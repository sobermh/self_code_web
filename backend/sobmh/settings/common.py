"""
Django settings for psl_visualization project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import datetime
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-32np95y(-oj+raa(_dov+i-x76=l3y)lwz_aff=*h^2g^sva3$"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "corsheaders",
    
    "apps.user",
    "apps.region",
    "apps.exceldata"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # 添加c
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",  # 手动注释
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # 自定义logger的record
    "apps.middleware.RequestLogMiddleware",
]

ROOT_URLCONF = "psl_visualization.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "psl_visualization.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = "en-us"
#
# TIME_ZONE = "UTC"
#
# USE_I18N = True
#
# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----------------------- 配置日志系统----------------------------------------------
BASE_LOG_DIR = os.path.join(BASE_DIR.parent, 'log')
# 检查文件夹是否存在，如果不存在就创建
if not os.path.exists(BASE_LOG_DIR):
    os.makedirs(BASE_LOG_DIR)

LOGGING = {
    'version': 1,  # 指明dictConfig的版本
    'disable_existing_loggers': False,  # 设置已存在的logger不失效
    #     'incremental': True,  # 默认为False。True：是将配置解释为现有配置的增量。False：配置会覆盖已有默认配置。一般此项不用配置
    'filters': {
        'require_debug_true': {  # django在debug模式下才输出
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'client_ip': {
            '()': "apps.middleware.RequestLogFilter",  # 过滤器路径中间件路径
        },
    },
    'formatters': {  # 格式器
        'standard': {
            'format': '[%(asctime)s][%(levelname)s][%(ip)s][%(filename)s:%(lineno)d:%(funcName)s]：%(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '[%(asctime)s][%(levelname)s]：%(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },

    'handlers': {  # 处理器
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, 'info.log'),  # 日志文件的位置
            'maxBytes': 1024 * 1024 * 50,  # 日志大小50M
            'backupCount': 10,
            'formatter': 'standard',
            'encoding': 'utf-8',
            'filters': ['client_ip']
        },
    },
    'loggers': {  # 记录器 # 获取日志器对象，（日志器的名称）logger = logging.getLogger('django') logger.info(...)
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# ----------------------- REST_FRAMEWORK配置------------------------------------------------
REST_FRAMEWORK = {
    # 分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    # 筛选
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

    # 开启Authentication权限（如果有simplejwt，那么就是返回的access值）
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    # simplejwt鉴权方式
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# ----------------------- JWT配置------------------------------------------------
SIMPLE_JWT = {
    # token有效时长(返回的 access 有效时长)
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=5),
    # token刷新的有效时间(返回的 refresh 有效时长)
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7),  # 刷新令牌通常用于在访问令牌过期之后获取新的访问令牌，而无需再次输入用户凭证。
}

# -----------------------鉴权用户表--------------------------------------------
# 修改Django认证系统的用户模型类 应用.模型名 。不改会报错：user.User.groups: (fields.E304) Reverse accessor 'Group.user_set' for
# 'user.User.groups' clashes with reverse accessor for 'auth.User.groups'. HINT: Add or change a related_name
# argument to the definition for 'user.User.groups' or 'auth.User.groups'.
sys.path.insert(0, os.path.join(BASE_DIR.parent, 'apps'))  # 向第一个位置插入新的导包路径，防止过多的递归带来的加载过慢
AUTH_USER_MODEL = 'user.UserModel'

# ----------------------- 跨域配置--------------------------------------------
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie
CORS_ORIGIN_ALLOW_ALL = True  # 允许所有域名访问
CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'DELETE',
    "PATCH",
    'OPTIONS'
    )  # 允许的请求方法

